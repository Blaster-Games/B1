// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class RoomInfo;
struct RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::PlayerInfo* Arena::CreateMaybeMessage<::Protocol::PlayerInfo>(Arena*);
template<> ::Protocol::RoomInfo* Arena::CreateMaybeMessage<::Protocol::RoomInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kIsHostFieldNumber = 3,
    kTeamFieldNumber = 4,
  };
  // string playerName = 2;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // bool isHost = 3;
  void clear_ishost();
  bool ishost() const;
  void set_ishost(bool value);
  private:
  bool _internal_ishost() const;
  void _internal_set_ishost(bool value);
  public:

  // .Protocol.ETeamType team = 4;
  void clear_team();
  ::Protocol::ETeamType team() const;
  void set_team(::Protocol::ETeamType value);
  private:
  ::Protocol::ETeamType _internal_team() const;
  void _internal_set_team(::Protocol::ETeamType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    int32_t playerid_;
    bool ishost_;
    int team_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.RoomInfo) */ {
 public:
  inline RoomInfo() : RoomInfo(nullptr) {}
  ~RoomInfo() override;
  explicit PROTOBUF_CONSTEXPR RoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfo& from) {
    RoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.RoomInfo";
  }
  protected:
  explicit RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 5,
    kTitleFieldNumber = 2,
    kMapNameFieldNumber = 7,
    kRoomIdFieldNumber = 1,
    kModeFieldNumber = 3,
    kMaxPlayersFieldNumber = 4,
    kStateFieldNumber = 6,
  };
  // repeated .Protocol.PlayerInfo players = 5;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
      mutable_players();
  private:
  const ::Protocol::PlayerInfo& _internal_players(int index) const;
  ::Protocol::PlayerInfo* _internal_add_players();
  public:
  const ::Protocol::PlayerInfo& players(int index) const;
  ::Protocol::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
      players() const;

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string mapName = 7;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // int32 roomId = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // .Protocol.EGameMode mode = 3;
  void clear_mode();
  ::Protocol::EGameMode mode() const;
  void set_mode(::Protocol::EGameMode value);
  private:
  ::Protocol::EGameMode _internal_mode() const;
  void _internal_set_mode(::Protocol::EGameMode value);
  public:

  // int32 maxPlayers = 4;
  void clear_maxplayers();
  int32_t maxplayers() const;
  void set_maxplayers(int32_t value);
  private:
  int32_t _internal_maxplayers() const;
  void _internal_set_maxplayers(int32_t value);
  public:

  // .Protocol.ERoomState state = 6;
  void clear_state();
  ::Protocol::ERoomState state() const;
  void set_state(::Protocol::ERoomState value);
  private:
  ::Protocol::ERoomState _internal_state() const;
  void _internal_set_state(::Protocol::ERoomState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.RoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
    int32_t roomid_;
    int mode_;
    int32_t maxplayers_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerInfo

// int32 playerId = 1;
inline void PlayerInfo::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t PlayerInfo::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t PlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.playerId)
  return _internal_playerid();
}
inline void PlayerInfo::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void PlayerInfo::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.playerId)
}

// string playerName = 2;
inline void PlayerInfo::clear_playername() {
  _impl_.playername_.ClearToEmpty();
}
inline const std::string& PlayerInfo::playername() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_playername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.playerName)
}
inline std::string* PlayerInfo::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerInfo.playerName)
  return _s;
}
inline const std::string& PlayerInfo::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void PlayerInfo::_internal_set_playername(const std::string& value) {
  
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_playername() {
  
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_playername() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerInfo.playerName)
  return _impl_.playername_.Release();
}
inline void PlayerInfo::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerInfo.playerName)
}

// bool isHost = 3;
inline void PlayerInfo::clear_ishost() {
  _impl_.ishost_ = false;
}
inline bool PlayerInfo::_internal_ishost() const {
  return _impl_.ishost_;
}
inline bool PlayerInfo::ishost() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.isHost)
  return _internal_ishost();
}
inline void PlayerInfo::_internal_set_ishost(bool value) {
  
  _impl_.ishost_ = value;
}
inline void PlayerInfo::set_ishost(bool value) {
  _internal_set_ishost(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.isHost)
}

// .Protocol.ETeamType team = 4;
inline void PlayerInfo::clear_team() {
  _impl_.team_ = 0;
}
inline ::Protocol::ETeamType PlayerInfo::_internal_team() const {
  return static_cast< ::Protocol::ETeamType >(_impl_.team_);
}
inline ::Protocol::ETeamType PlayerInfo::team() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.team)
  return _internal_team();
}
inline void PlayerInfo::_internal_set_team(::Protocol::ETeamType value) {
  
  _impl_.team_ = value;
}
inline void PlayerInfo::set_team(::Protocol::ETeamType value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.team)
}

// -------------------------------------------------------------------

// RoomInfo

// int32 roomId = 1;
inline void RoomInfo::clear_roomid() {
  _impl_.roomid_ = 0;
}
inline int32_t RoomInfo::_internal_roomid() const {
  return _impl_.roomid_;
}
inline int32_t RoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.roomId)
  return _internal_roomid();
}
inline void RoomInfo::_internal_set_roomid(int32_t value) {
  
  _impl_.roomid_ = value;
}
inline void RoomInfo::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.roomId)
}

// string title = 2;
inline void RoomInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& RoomInfo::title() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfo::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.title)
}
inline std::string* RoomInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:Protocol.RoomInfo.title)
  return _s;
}
inline const std::string& RoomInfo::_internal_title() const {
  return _impl_.title_.Get();
}
inline void RoomInfo::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfo::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfo::release_title() {
  // @@protoc_insertion_point(field_release:Protocol.RoomInfo.title)
  return _impl_.title_.Release();
}
inline void RoomInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.RoomInfo.title)
}

// .Protocol.EGameMode mode = 3;
inline void RoomInfo::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::Protocol::EGameMode RoomInfo::_internal_mode() const {
  return static_cast< ::Protocol::EGameMode >(_impl_.mode_);
}
inline ::Protocol::EGameMode RoomInfo::mode() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.mode)
  return _internal_mode();
}
inline void RoomInfo::_internal_set_mode(::Protocol::EGameMode value) {
  
  _impl_.mode_ = value;
}
inline void RoomInfo::set_mode(::Protocol::EGameMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.mode)
}

// int32 maxPlayers = 4;
inline void RoomInfo::clear_maxplayers() {
  _impl_.maxplayers_ = 0;
}
inline int32_t RoomInfo::_internal_maxplayers() const {
  return _impl_.maxplayers_;
}
inline int32_t RoomInfo::maxplayers() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.maxPlayers)
  return _internal_maxplayers();
}
inline void RoomInfo::_internal_set_maxplayers(int32_t value) {
  
  _impl_.maxplayers_ = value;
}
inline void RoomInfo::set_maxplayers(int32_t value) {
  _internal_set_maxplayers(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.maxPlayers)
}

// repeated .Protocol.PlayerInfo players = 5;
inline int RoomInfo::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int RoomInfo::players_size() const {
  return _internal_players_size();
}
inline void RoomInfo::clear_players() {
  _impl_.players_.Clear();
}
inline ::Protocol::PlayerInfo* RoomInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.RoomInfo.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
RoomInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.RoomInfo.players)
  return &_impl_.players_;
}
inline const ::Protocol::PlayerInfo& RoomInfo::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Protocol::PlayerInfo& RoomInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.players)
  return _internal_players(index);
}
inline ::Protocol::PlayerInfo* RoomInfo::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Protocol::PlayerInfo* RoomInfo::add_players() {
  ::Protocol::PlayerInfo* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Protocol.RoomInfo.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
RoomInfo::players() const {
  // @@protoc_insertion_point(field_list:Protocol.RoomInfo.players)
  return _impl_.players_;
}

// .Protocol.ERoomState state = 6;
inline void RoomInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::ERoomState RoomInfo::_internal_state() const {
  return static_cast< ::Protocol::ERoomState >(_impl_.state_);
}
inline ::Protocol::ERoomState RoomInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.state)
  return _internal_state();
}
inline void RoomInfo::_internal_set_state(::Protocol::ERoomState value) {
  
  _impl_.state_ = value;
}
inline void RoomInfo::set_state(::Protocol::ERoomState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.state)
}

// string mapName = 7;
inline void RoomInfo::clear_mapname() {
  _impl_.mapname_.ClearToEmpty();
}
inline const std::string& RoomInfo::mapname() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.mapName)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfo::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.mapName)
}
inline std::string* RoomInfo::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:Protocol.RoomInfo.mapName)
  return _s;
}
inline const std::string& RoomInfo::_internal_mapname() const {
  return _impl_.mapname_.Get();
}
inline void RoomInfo::_internal_set_mapname(const std::string& value) {
  
  _impl_.mapname_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfo::_internal_mutable_mapname() {
  
  return _impl_.mapname_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfo::release_mapname() {
  // @@protoc_insertion_point(field_release:Protocol.RoomInfo.mapName)
  return _impl_.mapname_.Release();
}
inline void RoomInfo::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  _impl_.mapname_.SetAllocated(mapname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapname_.IsDefault()) {
    _impl_.mapname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.RoomInfo.mapName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
